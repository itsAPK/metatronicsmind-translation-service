// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    INDIVIDUAL
    ORGANIZATION
    ADMIN
}

enum Status {
    UNDER_REVIEW
    APPROVED
    REJECTED
}

model User {
    id              String            @id @default(cuid())
    name            String
    email           String            @unique
    role            Role
    password        String
    gstin           String?
    createAt        DateTime?         @default(now())
    TranslationInfo TranslationInfo[]
    PaymentHistory  PaymentHistory[]
    Discount        Discount?

}

model Language {
    id              String            @id @default(cuid())
    name            String
    code            String            @unique
    pricePerWord    Float             @default(0.5)
    pricePerPage    Float             @default(2)
    TranslatedFiles TranslatedFiles[]
}

model TranslationInfo {
    id              String            @id @default(cuid())
    user            User              @relation(fields: [userId], references: [id])
    userId          String
    fileName        String
    totalWords      Int
    totalAmount     Int
    createdAt       DateTime?         @default(now())
    blobLink        String
    TranslatedFiles TranslatedFiles[]
    isApproved      Boolean           @default(false)
    status          Status            @default(UNDER_REVIEW)
    PaymentHistory  PaymentHistory[]
}

model TranslatedFiles {
    id                String          @id @default(cuid())
    file              String
    translationInfo   TranslationInfo @relation(fields: [translationInfoId], references: [id])
    translationInfoId String
    language          Language        @relation(fields: [languageId], references: [code])
    languageId        String
    createdAt         DateTime?       @default(now())
    totalWords        Int
}

model PaymentHistory {
    id                String          @id @default(cuid())
    orderId           String
    paymentId         String
    signature         String
    recipet           String
    amount            Int
    user              User            @relation(fields: [userId], references: [id])
    translation       TranslationInfo @relation(fields: [translationInfoId], references: [id])
    createdAt         DateTime?       @default(now())
    userId            String
    translationInfoId String
}

model Discount {
    id     String  @id @default(cuid())
    discount Decimal
    user   User    @relation(fields: [userId], references: [id])
    userId String @unique
}
